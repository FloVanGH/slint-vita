// SPDX-FileCopyrightText: 2023 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Theme } from "../styling/theme.slint";
import { StateArea } from "state_area.slint";

component BubbleItem {
    callback clicked <=> i-state-area.clicked;

    in property <string> text <=> i-text.text;
    in property <image> icon <=> i-image.source;
    in property <bool> selected <=> i-state-area.has-focus;
    in property <bool> filler;
    in property <brush> background <=> i-container.background;

    width: Theme.sizes.bubble;
    height: Theme.sizes.bubble;

    i-container := Rectangle {
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        width: 100%;
        height: 100%;
        visible: !root.filler;
        clip: true;
        border-radius: max(self.width, self.height) / 2;
        background: blue;

        i-image := Image {
            width: 100%;
            height: 100%;
            image-fit: fill;
        }

        animate width, height { duration: 2 * Theme.animations.medium; easing: cubic-bezier(0.05, 0.7, 0.1, 1.0);  }
    }

    i-text := Text {
        color: Theme.palette.foreground-brush;
        font-size: Theme.typo.label-list-description.font-size;
        horizontal-alignment: center;
        y: root.height;
    }

    i-state-area := StateArea {
        x: i-container.x;
        y: i-container.y;
        width: i-container.width;
        height: i-container.height;
        border-radius: i-container.border-radius;
    }

    states [
        pressed when i-state-area.pressed : {
            i-container.width: 110%;
            i-container.height: 110%;
        }
    ]
}

export struct Bubble {
    title: string,
    icon: image,
    row: int,
    column: int,
    filler: bool,
    selected: bool,
    background: brush,
}

export struct BubblePage {
    bubbles: [Bubble]
}

export component BubblePageItem {
    private property <int> even-columns: 3;
    private property <int> odd-columns: 4;
    private property <int> rows: 3;
    private property <length> even-x:
        (root.width - even-columns * Theme.sizes.bubble - ((even-columns - 1) * root.hor-spacing)) / 2;
    private property <length> odd-x:
    (root.width - odd-columns * Theme.sizes.bubble - ((odd-columns - 1) * root.hor-spacing)) / 2;
    private property <length> start-y:
        (root.height - (rows * (Theme.sizes.bubble + Theme.typo.label-list-description.font-size) + ((rows - 1) * root.ver-spacing))) / 2;

    callback item-clicked(string /* index */);

    in property <[Bubble]> model;
    in property <length> ver-spacing: Theme.spacings.small;
    in property <length> hor-spacing: Theme.sizes.bubble / 2;

    for bubble[index] in model : BubbleItem {
        text: bubble.title;
        icon: bubble.icon;
        x: bubble-x(bubble.row, bubble.column);
        y: bubble-y(bubble.row);
        filler: bubble.filler;
        selected: bubble.selected;
        background: bubble.background;

        clicked => {
            if(self.filler) {
                return;
            }

            item-clicked(bubble.title);
        }
    }

    function bubble-x(row: int, column: int) -> length {
        if(row == 0 || row == 2) {
            return even-x + mod(column, even-columns) * (Theme.sizes.bubble + root.hor-spacing);
        }

        odd-x + mod(column, odd-columns) * (Theme.sizes.bubble + root.hor-spacing)
    }

    function bubble-y(row: int) -> length {
        root.start-y +
            (row == 0 ? 0px : row == 1 ? Theme.sizes.bubble + root.ver-spacing : 2 * (Theme.sizes.bubble + root.ver-spacing))
    }
}

export component BubbleLauncher {
    private property <int> focus-row: -1;
    private property <int> focus-column: -1;

    callback bubble-clicked(string /* key */);

    in property <[[Bubble]]> model;
    in property <int> current-page;

    horizontal-stretch: 1;

    Rectangle {
        width: 100%;
        height: 100%;
        clip: true;

        i-layout := VerticalLayout {
            y: -current-page * root.height;
            for page[index] in model : BubblePageItem {
                width: 100%;
                height: root.height;
                model: page;

                item-clicked(id) => {
                    root.bubble-clicked(id);
                }
            }

            animate y { duration: 2 * Theme.animations.medium; easing: cubic-bezier(0.05, 0.7, 0.1, 1.0);  }
        }
    }
}