// SPDX-FileCopyrightText: 2023 Florian Blasius <co_sl@tutanota.com>
// SPDX-License-Identifier: MIT

import { Theme } from "../styling/theme.slint";
import { StateArea } from "state_area.slint";

component Thumb  {
    callback moved <=> i-state-area.moved;
    callback pointer-event <=> i-state-area.pointer-event;

    out property <length> mouse-x <=> i-state-area.mouse-x;
    out property <length> mouse-y <=> i-state-area.mouse-y;
    out property <length> pressed-x <=> i-state-area.pressed-x;
    out property <length> pressed-y <=> i-state-area.pressed-y;

    width: 128px;
    height: 32px;

    i-container := Rectangle {
        border-radius: 4px;
        width: 100%;
        height: 8px;
        background: #d4d4d4;

        animate width, height { duration: 2 * Theme.animations.medium; easing: cubic-bezier(0.05, 0.7, 0.1, 1.0);  }
    }

    i-state-area := StateArea {
        width: i-container.width;
        height: i-container.height;
        border-radius: i-container.border-radius;
    }

    states [
        pressed when i-state-area.pressed : {
            i-container.width: 110%;
            i-container.height: 8px * 1.1;
        }
    ]
}

export component Container {
    callback close();

    in property <brush> background <=> i-inner-container.background;
    in property <length> border-radius <=> i-inner-container.border-radius;

    i-inner-container := Rectangle {
        y: 0px;
        height: root.height - self.y;

        @children

        animate y { duration: Theme.animations.fast; }
    }

    Thumb {
        x: (parent.width - self.width) / 2;
        y:  i-inner-container.y;

        moved => {
            i-inner-container.y = min(root.height / 2, max(0px, i-inner-container.y - (self.pressed-y - self.mouse-y)));
        }

        pointer-event(e) => {
            if(e.kind == PointerEventKind.up) {
                // FIXME
                if(i-inner-container.y >= root.height * 0.1) {
                    root.close();
                }

                if(i-inner-container.y < root.height * 0.1) {
                    i-inner-container.y = 0;
                }
            }
        }
    }
}